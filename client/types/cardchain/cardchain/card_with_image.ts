// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: cardchain/cardchain/card_with_image.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Card } from "./card";

export const protobufPackage = "cardchain.cardchain";

export interface CardWithImage {
  card: Card | undefined;
  image: string;
  hash: string;
}

function createBaseCardWithImage(): CardWithImage {
  return { card: undefined, image: "", hash: "" };
}

export const CardWithImage: MessageFns<CardWithImage> = {
  encode(message: CardWithImage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.card !== undefined) {
      Card.encode(message.card, writer.uint32(10).fork()).join();
    }
    if (message.image !== "") {
      writer.uint32(18).string(message.image);
    }
    if (message.hash !== "") {
      writer.uint32(26).string(message.hash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CardWithImage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCardWithImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.card = Card.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.hash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CardWithImage {
    return {
      card: isSet(object.card) ? Card.fromJSON(object.card) : undefined,
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
    };
  },

  toJSON(message: CardWithImage): unknown {
    const obj: any = {};
    if (message.card !== undefined) {
      obj.card = Card.toJSON(message.card);
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CardWithImage>, I>>(base?: I): CardWithImage {
    return CardWithImage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CardWithImage>, I>>(object: I): CardWithImage {
    const message = createBaseCardWithImage();
    message.card = (object.card !== undefined && object.card !== null) ? Card.fromPartial(object.card) : undefined;
    message.image = object.image ?? "";
    message.hash = object.hash ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
