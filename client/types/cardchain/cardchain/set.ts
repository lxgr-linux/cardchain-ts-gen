// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: cardchain/cardchain/set.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";

export const protobufPackage = "cardchain.cardchain";

export enum SetStatus {
  undefined = 0,
  design = 1,
  finalized = 2,
  active = 3,
  archived = 4,
  UNRECOGNIZED = -1,
}

export function setStatusFromJSON(object: any): SetStatus {
  switch (object) {
    case 0:
    case "undefined":
      return SetStatus.undefined;
    case 1:
    case "design":
      return SetStatus.design;
    case 2:
    case "finalized":
      return SetStatus.finalized;
    case 3:
    case "active":
      return SetStatus.active;
    case 4:
    case "archived":
      return SetStatus.archived;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SetStatus.UNRECOGNIZED;
  }
}

export function setStatusToJSON(object: SetStatus): string {
  switch (object) {
    case SetStatus.undefined:
      return "undefined";
    case SetStatus.design:
      return "design";
    case SetStatus.finalized:
      return "finalized";
    case SetStatus.active:
      return "active";
    case SetStatus.archived:
      return "archived";
    case SetStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Set {
  name: string;
  cards: number[];
  artist: string;
  storyWriter: string;
  contributors: string[];
  story: string;
  artworkId: number;
  status: SetStatus;
  timeStamp: number;
  contributorsDistribution: AddrWithQuantity[];
  rarities: InnerRarities[];
}

export interface InnerRarities {
  R: number[];
}

export interface AddrWithQuantity {
  addr: string;
  q: number;
  payment: Coin | undefined;
}

function createBaseSet(): Set {
  return {
    name: "",
    cards: [],
    artist: "",
    storyWriter: "",
    contributors: [],
    story: "",
    artworkId: 0,
    status: 0,
    timeStamp: 0,
    contributorsDistribution: [],
    rarities: [],
  };
}

export const Set: MessageFns<Set> = {
  encode(message: Set, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    writer.uint32(18).fork();
    for (const v of message.cards) {
      writer.uint64(v);
    }
    writer.join();
    if (message.artist !== "") {
      writer.uint32(26).string(message.artist);
    }
    if (message.storyWriter !== "") {
      writer.uint32(34).string(message.storyWriter);
    }
    for (const v of message.contributors) {
      writer.uint32(42).string(v!);
    }
    if (message.story !== "") {
      writer.uint32(50).string(message.story);
    }
    if (message.artworkId !== 0) {
      writer.uint32(56).uint64(message.artworkId);
    }
    if (message.status !== 0) {
      writer.uint32(64).int32(message.status);
    }
    if (message.timeStamp !== 0) {
      writer.uint32(72).int64(message.timeStamp);
    }
    for (const v of message.contributorsDistribution) {
      AddrWithQuantity.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.rarities) {
      InnerRarities.encode(v!, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Set {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.cards.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.cards.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.artist = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.storyWriter = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.contributors.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.story = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.artworkId = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.timeStamp = longToNumber(reader.int64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.contributorsDistribution.push(AddrWithQuantity.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.rarities.push(InnerRarities.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Set {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      cards: globalThis.Array.isArray(object?.cards) ? object.cards.map((e: any) => globalThis.Number(e)) : [],
      artist: isSet(object.artist) ? globalThis.String(object.artist) : "",
      storyWriter: isSet(object.storyWriter) ? globalThis.String(object.storyWriter) : "",
      contributors: globalThis.Array.isArray(object?.contributors)
        ? object.contributors.map((e: any) => globalThis.String(e))
        : [],
      story: isSet(object.story) ? globalThis.String(object.story) : "",
      artworkId: isSet(object.artworkId) ? globalThis.Number(object.artworkId) : 0,
      status: isSet(object.status) ? setStatusFromJSON(object.status) : 0,
      timeStamp: isSet(object.timeStamp) ? globalThis.Number(object.timeStamp) : 0,
      contributorsDistribution: globalThis.Array.isArray(object?.contributorsDistribution)
        ? object.contributorsDistribution.map((e: any) => AddrWithQuantity.fromJSON(e))
        : [],
      rarities: globalThis.Array.isArray(object?.rarities)
        ? object.rarities.map((e: any) => InnerRarities.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Set): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.cards?.length) {
      obj.cards = message.cards.map((e) => Math.round(e));
    }
    if (message.artist !== "") {
      obj.artist = message.artist;
    }
    if (message.storyWriter !== "") {
      obj.storyWriter = message.storyWriter;
    }
    if (message.contributors?.length) {
      obj.contributors = message.contributors;
    }
    if (message.story !== "") {
      obj.story = message.story;
    }
    if (message.artworkId !== 0) {
      obj.artworkId = Math.round(message.artworkId);
    }
    if (message.status !== 0) {
      obj.status = setStatusToJSON(message.status);
    }
    if (message.timeStamp !== 0) {
      obj.timeStamp = Math.round(message.timeStamp);
    }
    if (message.contributorsDistribution?.length) {
      obj.contributorsDistribution = message.contributorsDistribution.map((e) => AddrWithQuantity.toJSON(e));
    }
    if (message.rarities?.length) {
      obj.rarities = message.rarities.map((e) => InnerRarities.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Set>, I>>(base?: I): Set {
    return Set.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Set>, I>>(object: I): Set {
    const message = createBaseSet();
    message.name = object.name ?? "";
    message.cards = object.cards?.map((e) => e) || [];
    message.artist = object.artist ?? "";
    message.storyWriter = object.storyWriter ?? "";
    message.contributors = object.contributors?.map((e) => e) || [];
    message.story = object.story ?? "";
    message.artworkId = object.artworkId ?? 0;
    message.status = object.status ?? 0;
    message.timeStamp = object.timeStamp ?? 0;
    message.contributorsDistribution = object.contributorsDistribution?.map((e) => AddrWithQuantity.fromPartial(e)) ||
      [];
    message.rarities = object.rarities?.map((e) => InnerRarities.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInnerRarities(): InnerRarities {
  return { R: [] };
}

export const InnerRarities: MessageFns<InnerRarities> = {
  encode(message: InnerRarities, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.R) {
      writer.uint64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InnerRarities {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInnerRarities();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.R.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.R.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InnerRarities {
    return { R: globalThis.Array.isArray(object?.R) ? object.R.map((e: any) => globalThis.Number(e)) : [] };
  },

  toJSON(message: InnerRarities): unknown {
    const obj: any = {};
    if (message.R?.length) {
      obj.R = message.R.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InnerRarities>, I>>(base?: I): InnerRarities {
    return InnerRarities.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InnerRarities>, I>>(object: I): InnerRarities {
    const message = createBaseInnerRarities();
    message.R = object.R?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddrWithQuantity(): AddrWithQuantity {
  return { addr: "", q: 0, payment: undefined };
}

export const AddrWithQuantity: MessageFns<AddrWithQuantity> = {
  encode(message: AddrWithQuantity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.addr !== "") {
      writer.uint32(10).string(message.addr);
    }
    if (message.q !== 0) {
      writer.uint32(16).uint32(message.q);
    }
    if (message.payment !== undefined) {
      Coin.encode(message.payment, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddrWithQuantity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddrWithQuantity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.addr = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.q = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payment = Coin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddrWithQuantity {
    return {
      addr: isSet(object.addr) ? globalThis.String(object.addr) : "",
      q: isSet(object.q) ? globalThis.Number(object.q) : 0,
      payment: isSet(object.payment) ? Coin.fromJSON(object.payment) : undefined,
    };
  },

  toJSON(message: AddrWithQuantity): unknown {
    const obj: any = {};
    if (message.addr !== "") {
      obj.addr = message.addr;
    }
    if (message.q !== 0) {
      obj.q = Math.round(message.q);
    }
    if (message.payment !== undefined) {
      obj.payment = Coin.toJSON(message.payment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddrWithQuantity>, I>>(base?: I): AddrWithQuantity {
    return AddrWithQuantity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddrWithQuantity>, I>>(object: I): AddrWithQuantity {
    const message = createBaseAddrWithQuantity();
    message.addr = object.addr ?? "";
    message.q = object.q ?? 0;
    message.payment = (object.payment !== undefined && object.payment !== null)
      ? Coin.fromPartial(object.payment)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
