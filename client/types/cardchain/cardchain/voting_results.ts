// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: cardchain/cardchain/voting_results.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { VotingResult } from "./voting";

export const protobufPackage = "cardchain.cardchain";

export interface VotingResults {
  totalVotes: number;
  totalFairEnoughVotes: number;
  totalOverpoweredVotes: number;
  totalUnderpoweredVotes: number;
  totalInappropriateVotes: number;
  cardResults: VotingResult[];
  notes: string;
}

function createBaseVotingResults(): VotingResults {
  return {
    totalVotes: 0,
    totalFairEnoughVotes: 0,
    totalOverpoweredVotes: 0,
    totalUnderpoweredVotes: 0,
    totalInappropriateVotes: 0,
    cardResults: [],
    notes: "",
  };
}

export const VotingResults: MessageFns<VotingResults> = {
  encode(message: VotingResults, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalVotes !== 0) {
      writer.uint32(8).uint64(message.totalVotes);
    }
    if (message.totalFairEnoughVotes !== 0) {
      writer.uint32(16).uint64(message.totalFairEnoughVotes);
    }
    if (message.totalOverpoweredVotes !== 0) {
      writer.uint32(24).uint64(message.totalOverpoweredVotes);
    }
    if (message.totalUnderpoweredVotes !== 0) {
      writer.uint32(32).uint64(message.totalUnderpoweredVotes);
    }
    if (message.totalInappropriateVotes !== 0) {
      writer.uint32(40).uint64(message.totalInappropriateVotes);
    }
    for (const v of message.cardResults) {
      VotingResult.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.notes !== "") {
      writer.uint32(58).string(message.notes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VotingResults {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVotingResults();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalVotes = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalFairEnoughVotes = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalOverpoweredVotes = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalUnderpoweredVotes = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.totalInappropriateVotes = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.cardResults.push(VotingResult.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.notes = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VotingResults {
    return {
      totalVotes: isSet(object.totalVotes) ? globalThis.Number(object.totalVotes) : 0,
      totalFairEnoughVotes: isSet(object.totalFairEnoughVotes) ? globalThis.Number(object.totalFairEnoughVotes) : 0,
      totalOverpoweredVotes: isSet(object.totalOverpoweredVotes) ? globalThis.Number(object.totalOverpoweredVotes) : 0,
      totalUnderpoweredVotes: isSet(object.totalUnderpoweredVotes)
        ? globalThis.Number(object.totalUnderpoweredVotes)
        : 0,
      totalInappropriateVotes: isSet(object.totalInappropriateVotes)
        ? globalThis.Number(object.totalInappropriateVotes)
        : 0,
      cardResults: globalThis.Array.isArray(object?.cardResults)
        ? object.cardResults.map((e: any) => VotingResult.fromJSON(e))
        : [],
      notes: isSet(object.notes) ? globalThis.String(object.notes) : "",
    };
  },

  toJSON(message: VotingResults): unknown {
    const obj: any = {};
    if (message.totalVotes !== 0) {
      obj.totalVotes = Math.round(message.totalVotes);
    }
    if (message.totalFairEnoughVotes !== 0) {
      obj.totalFairEnoughVotes = Math.round(message.totalFairEnoughVotes);
    }
    if (message.totalOverpoweredVotes !== 0) {
      obj.totalOverpoweredVotes = Math.round(message.totalOverpoweredVotes);
    }
    if (message.totalUnderpoweredVotes !== 0) {
      obj.totalUnderpoweredVotes = Math.round(message.totalUnderpoweredVotes);
    }
    if (message.totalInappropriateVotes !== 0) {
      obj.totalInappropriateVotes = Math.round(message.totalInappropriateVotes);
    }
    if (message.cardResults?.length) {
      obj.cardResults = message.cardResults.map((e) => VotingResult.toJSON(e));
    }
    if (message.notes !== "") {
      obj.notes = message.notes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VotingResults>, I>>(base?: I): VotingResults {
    return VotingResults.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VotingResults>, I>>(object: I): VotingResults {
    const message = createBaseVotingResults();
    message.totalVotes = object.totalVotes ?? 0;
    message.totalFairEnoughVotes = object.totalFairEnoughVotes ?? 0;
    message.totalOverpoweredVotes = object.totalOverpoweredVotes ?? 0;
    message.totalUnderpoweredVotes = object.totalUnderpoweredVotes ?? 0;
    message.totalInappropriateVotes = object.totalInappropriateVotes ?? 0;
    message.cardResults = object.cardResults?.map((e) => VotingResult.fromPartial(e)) || [];
    message.notes = object.notes ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
