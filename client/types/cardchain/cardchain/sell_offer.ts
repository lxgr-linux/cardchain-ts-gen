// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: cardchain/cardchain/sell_offer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";

export const protobufPackage = "cardchain.cardchain";

export enum SellOfferStatus {
  empty = 0,
  open = 1,
  sold = 2,
  removed = 3,
  UNRECOGNIZED = -1,
}

export function sellOfferStatusFromJSON(object: any): SellOfferStatus {
  switch (object) {
    case 0:
    case "empty":
      return SellOfferStatus.empty;
    case 1:
    case "open":
      return SellOfferStatus.open;
    case 2:
    case "sold":
      return SellOfferStatus.sold;
    case 3:
    case "removed":
      return SellOfferStatus.removed;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SellOfferStatus.UNRECOGNIZED;
  }
}

export function sellOfferStatusToJSON(object: SellOfferStatus): string {
  switch (object) {
    case SellOfferStatus.empty:
      return "empty";
    case SellOfferStatus.open:
      return "open";
    case SellOfferStatus.sold:
      return "sold";
    case SellOfferStatus.removed:
      return "removed";
    case SellOfferStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SellOffer {
  seller: string;
  buyer: string;
  card: number;
  price: Coin | undefined;
  status: SellOfferStatus;
}

function createBaseSellOffer(): SellOffer {
  return { seller: "", buyer: "", card: 0, price: undefined, status: 0 };
}

export const SellOffer: MessageFns<SellOffer> = {
  encode(message: SellOffer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seller !== "") {
      writer.uint32(10).string(message.seller);
    }
    if (message.buyer !== "") {
      writer.uint32(18).string(message.buyer);
    }
    if (message.card !== 0) {
      writer.uint32(24).uint64(message.card);
    }
    if (message.price !== undefined) {
      Coin.encode(message.price, writer.uint32(34).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SellOffer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSellOffer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.seller = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.buyer = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.card = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.price = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SellOffer {
    return {
      seller: isSet(object.seller) ? globalThis.String(object.seller) : "",
      buyer: isSet(object.buyer) ? globalThis.String(object.buyer) : "",
      card: isSet(object.card) ? globalThis.Number(object.card) : 0,
      price: isSet(object.price) ? Coin.fromJSON(object.price) : undefined,
      status: isSet(object.status) ? sellOfferStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: SellOffer): unknown {
    const obj: any = {};
    if (message.seller !== "") {
      obj.seller = message.seller;
    }
    if (message.buyer !== "") {
      obj.buyer = message.buyer;
    }
    if (message.card !== 0) {
      obj.card = Math.round(message.card);
    }
    if (message.price !== undefined) {
      obj.price = Coin.toJSON(message.price);
    }
    if (message.status !== 0) {
      obj.status = sellOfferStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SellOffer>, I>>(base?: I): SellOffer {
    return SellOffer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SellOffer>, I>>(object: I): SellOffer {
    const message = createBaseSellOffer();
    message.seller = object.seller ?? "";
    message.buyer = object.buyer ?? "";
    message.card = object.card ?? 0;
    message.price = (object.price !== undefined && object.price !== null) ? Coin.fromPartial(object.price) : undefined;
    message.status = object.status ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
