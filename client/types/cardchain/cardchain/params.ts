// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: cardchain/cardchain/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";

export const protobufPackage = "cardchain.cardchain";

/** Params defines the parameters for the module. */
export interface Params {
  votingRightsExpirationTime: number;
  setSize: number;
  setPrice: Coin | undefined;
  activeSetsAmount: number;
  setCreationFee: Coin | undefined;
  collateralDeposit: Coin | undefined;
  winnerReward: number;
  hourlyFaucet: Coin | undefined;
  inflationRate: string;
  raresPerPack: number;
  commonsPerPack: number;
  unCommonsPerPack: number;
  trialPeriod: number;
  gameVoteRatio: number;
  cardAuctionPriceReductionPeriod: number;
  airDropValue: Coin | undefined;
  airDropMaxBlockHeight: number;
  trialVoteReward: Coin | undefined;
  votePoolFraction: number;
  votingRewardCap: number;
  matchWorkerDelay: number;
  rareDropRatio: number;
  exceptionalDropRatio: number;
  uniqueDropRatio: number;
}

function createBaseParams(): Params {
  return {
    votingRightsExpirationTime: 0,
    setSize: 0,
    setPrice: undefined,
    activeSetsAmount: 0,
    setCreationFee: undefined,
    collateralDeposit: undefined,
    winnerReward: 0,
    hourlyFaucet: undefined,
    inflationRate: "",
    raresPerPack: 0,
    commonsPerPack: 0,
    unCommonsPerPack: 0,
    trialPeriod: 0,
    gameVoteRatio: 0,
    cardAuctionPriceReductionPeriod: 0,
    airDropValue: undefined,
    airDropMaxBlockHeight: 0,
    trialVoteReward: undefined,
    votePoolFraction: 0,
    votingRewardCap: 0,
    matchWorkerDelay: 0,
    rareDropRatio: 0,
    exceptionalDropRatio: 0,
    uniqueDropRatio: 0,
  };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.votingRightsExpirationTime !== 0) {
      writer.uint32(8).int64(message.votingRightsExpirationTime);
    }
    if (message.setSize !== 0) {
      writer.uint32(16).uint64(message.setSize);
    }
    if (message.setPrice !== undefined) {
      Coin.encode(message.setPrice, writer.uint32(26).fork()).join();
    }
    if (message.activeSetsAmount !== 0) {
      writer.uint32(32).uint64(message.activeSetsAmount);
    }
    if (message.setCreationFee !== undefined) {
      Coin.encode(message.setCreationFee, writer.uint32(42).fork()).join();
    }
    if (message.collateralDeposit !== undefined) {
      Coin.encode(message.collateralDeposit, writer.uint32(50).fork()).join();
    }
    if (message.winnerReward !== 0) {
      writer.uint32(56).int64(message.winnerReward);
    }
    if (message.hourlyFaucet !== undefined) {
      Coin.encode(message.hourlyFaucet, writer.uint32(74).fork()).join();
    }
    if (message.inflationRate !== "") {
      writer.uint32(82).string(message.inflationRate);
    }
    if (message.raresPerPack !== 0) {
      writer.uint32(88).uint64(message.raresPerPack);
    }
    if (message.commonsPerPack !== 0) {
      writer.uint32(96).uint64(message.commonsPerPack);
    }
    if (message.unCommonsPerPack !== 0) {
      writer.uint32(104).uint64(message.unCommonsPerPack);
    }
    if (message.trialPeriod !== 0) {
      writer.uint32(112).uint64(message.trialPeriod);
    }
    if (message.gameVoteRatio !== 0) {
      writer.uint32(120).int64(message.gameVoteRatio);
    }
    if (message.cardAuctionPriceReductionPeriod !== 0) {
      writer.uint32(128).int64(message.cardAuctionPriceReductionPeriod);
    }
    if (message.airDropValue !== undefined) {
      Coin.encode(message.airDropValue, writer.uint32(138).fork()).join();
    }
    if (message.airDropMaxBlockHeight !== 0) {
      writer.uint32(144).int64(message.airDropMaxBlockHeight);
    }
    if (message.trialVoteReward !== undefined) {
      Coin.encode(message.trialVoteReward, writer.uint32(154).fork()).join();
    }
    if (message.votePoolFraction !== 0) {
      writer.uint32(160).int64(message.votePoolFraction);
    }
    if (message.votingRewardCap !== 0) {
      writer.uint32(64).int64(message.votingRewardCap);
    }
    if (message.matchWorkerDelay !== 0) {
      writer.uint32(168).uint64(message.matchWorkerDelay);
    }
    if (message.rareDropRatio !== 0) {
      writer.uint32(176).uint64(message.rareDropRatio);
    }
    if (message.exceptionalDropRatio !== 0) {
      writer.uint32(184).uint64(message.exceptionalDropRatio);
    }
    if (message.uniqueDropRatio !== 0) {
      writer.uint32(192).uint64(message.uniqueDropRatio);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.votingRightsExpirationTime = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.setSize = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.setPrice = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.activeSetsAmount = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.setCreationFee = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.collateralDeposit = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.winnerReward = longToNumber(reader.int64());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.hourlyFaucet = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.inflationRate = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.raresPerPack = longToNumber(reader.uint64());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.commonsPerPack = longToNumber(reader.uint64());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.unCommonsPerPack = longToNumber(reader.uint64());
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.trialPeriod = longToNumber(reader.uint64());
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.gameVoteRatio = longToNumber(reader.int64());
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.cardAuctionPriceReductionPeriod = longToNumber(reader.int64());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.airDropValue = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.airDropMaxBlockHeight = longToNumber(reader.int64());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.trialVoteReward = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.votePoolFraction = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.votingRewardCap = longToNumber(reader.int64());
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.matchWorkerDelay = longToNumber(reader.uint64());
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.rareDropRatio = longToNumber(reader.uint64());
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.exceptionalDropRatio = longToNumber(reader.uint64());
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.uniqueDropRatio = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      votingRightsExpirationTime: isSet(object.votingRightsExpirationTime)
        ? globalThis.Number(object.votingRightsExpirationTime)
        : 0,
      setSize: isSet(object.setSize) ? globalThis.Number(object.setSize) : 0,
      setPrice: isSet(object.setPrice) ? Coin.fromJSON(object.setPrice) : undefined,
      activeSetsAmount: isSet(object.activeSetsAmount) ? globalThis.Number(object.activeSetsAmount) : 0,
      setCreationFee: isSet(object.setCreationFee) ? Coin.fromJSON(object.setCreationFee) : undefined,
      collateralDeposit: isSet(object.collateralDeposit) ? Coin.fromJSON(object.collateralDeposit) : undefined,
      winnerReward: isSet(object.winnerReward) ? globalThis.Number(object.winnerReward) : 0,
      hourlyFaucet: isSet(object.hourlyFaucet) ? Coin.fromJSON(object.hourlyFaucet) : undefined,
      inflationRate: isSet(object.inflationRate) ? globalThis.String(object.inflationRate) : "",
      raresPerPack: isSet(object.raresPerPack) ? globalThis.Number(object.raresPerPack) : 0,
      commonsPerPack: isSet(object.commonsPerPack) ? globalThis.Number(object.commonsPerPack) : 0,
      unCommonsPerPack: isSet(object.unCommonsPerPack) ? globalThis.Number(object.unCommonsPerPack) : 0,
      trialPeriod: isSet(object.trialPeriod) ? globalThis.Number(object.trialPeriod) : 0,
      gameVoteRatio: isSet(object.gameVoteRatio) ? globalThis.Number(object.gameVoteRatio) : 0,
      cardAuctionPriceReductionPeriod: isSet(object.cardAuctionPriceReductionPeriod)
        ? globalThis.Number(object.cardAuctionPriceReductionPeriod)
        : 0,
      airDropValue: isSet(object.airDropValue) ? Coin.fromJSON(object.airDropValue) : undefined,
      airDropMaxBlockHeight: isSet(object.airDropMaxBlockHeight) ? globalThis.Number(object.airDropMaxBlockHeight) : 0,
      trialVoteReward: isSet(object.trialVoteReward) ? Coin.fromJSON(object.trialVoteReward) : undefined,
      votePoolFraction: isSet(object.votePoolFraction) ? globalThis.Number(object.votePoolFraction) : 0,
      votingRewardCap: isSet(object.votingRewardCap) ? globalThis.Number(object.votingRewardCap) : 0,
      matchWorkerDelay: isSet(object.matchWorkerDelay) ? globalThis.Number(object.matchWorkerDelay) : 0,
      rareDropRatio: isSet(object.rareDropRatio) ? globalThis.Number(object.rareDropRatio) : 0,
      exceptionalDropRatio: isSet(object.exceptionalDropRatio) ? globalThis.Number(object.exceptionalDropRatio) : 0,
      uniqueDropRatio: isSet(object.uniqueDropRatio) ? globalThis.Number(object.uniqueDropRatio) : 0,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.votingRightsExpirationTime !== 0) {
      obj.votingRightsExpirationTime = Math.round(message.votingRightsExpirationTime);
    }
    if (message.setSize !== 0) {
      obj.setSize = Math.round(message.setSize);
    }
    if (message.setPrice !== undefined) {
      obj.setPrice = Coin.toJSON(message.setPrice);
    }
    if (message.activeSetsAmount !== 0) {
      obj.activeSetsAmount = Math.round(message.activeSetsAmount);
    }
    if (message.setCreationFee !== undefined) {
      obj.setCreationFee = Coin.toJSON(message.setCreationFee);
    }
    if (message.collateralDeposit !== undefined) {
      obj.collateralDeposit = Coin.toJSON(message.collateralDeposit);
    }
    if (message.winnerReward !== 0) {
      obj.winnerReward = Math.round(message.winnerReward);
    }
    if (message.hourlyFaucet !== undefined) {
      obj.hourlyFaucet = Coin.toJSON(message.hourlyFaucet);
    }
    if (message.inflationRate !== "") {
      obj.inflationRate = message.inflationRate;
    }
    if (message.raresPerPack !== 0) {
      obj.raresPerPack = Math.round(message.raresPerPack);
    }
    if (message.commonsPerPack !== 0) {
      obj.commonsPerPack = Math.round(message.commonsPerPack);
    }
    if (message.unCommonsPerPack !== 0) {
      obj.unCommonsPerPack = Math.round(message.unCommonsPerPack);
    }
    if (message.trialPeriod !== 0) {
      obj.trialPeriod = Math.round(message.trialPeriod);
    }
    if (message.gameVoteRatio !== 0) {
      obj.gameVoteRatio = Math.round(message.gameVoteRatio);
    }
    if (message.cardAuctionPriceReductionPeriod !== 0) {
      obj.cardAuctionPriceReductionPeriod = Math.round(message.cardAuctionPriceReductionPeriod);
    }
    if (message.airDropValue !== undefined) {
      obj.airDropValue = Coin.toJSON(message.airDropValue);
    }
    if (message.airDropMaxBlockHeight !== 0) {
      obj.airDropMaxBlockHeight = Math.round(message.airDropMaxBlockHeight);
    }
    if (message.trialVoteReward !== undefined) {
      obj.trialVoteReward = Coin.toJSON(message.trialVoteReward);
    }
    if (message.votePoolFraction !== 0) {
      obj.votePoolFraction = Math.round(message.votePoolFraction);
    }
    if (message.votingRewardCap !== 0) {
      obj.votingRewardCap = Math.round(message.votingRewardCap);
    }
    if (message.matchWorkerDelay !== 0) {
      obj.matchWorkerDelay = Math.round(message.matchWorkerDelay);
    }
    if (message.rareDropRatio !== 0) {
      obj.rareDropRatio = Math.round(message.rareDropRatio);
    }
    if (message.exceptionalDropRatio !== 0) {
      obj.exceptionalDropRatio = Math.round(message.exceptionalDropRatio);
    }
    if (message.uniqueDropRatio !== 0) {
      obj.uniqueDropRatio = Math.round(message.uniqueDropRatio);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.votingRightsExpirationTime = object.votingRightsExpirationTime ?? 0;
    message.setSize = object.setSize ?? 0;
    message.setPrice = (object.setPrice !== undefined && object.setPrice !== null)
      ? Coin.fromPartial(object.setPrice)
      : undefined;
    message.activeSetsAmount = object.activeSetsAmount ?? 0;
    message.setCreationFee = (object.setCreationFee !== undefined && object.setCreationFee !== null)
      ? Coin.fromPartial(object.setCreationFee)
      : undefined;
    message.collateralDeposit = (object.collateralDeposit !== undefined && object.collateralDeposit !== null)
      ? Coin.fromPartial(object.collateralDeposit)
      : undefined;
    message.winnerReward = object.winnerReward ?? 0;
    message.hourlyFaucet = (object.hourlyFaucet !== undefined && object.hourlyFaucet !== null)
      ? Coin.fromPartial(object.hourlyFaucet)
      : undefined;
    message.inflationRate = object.inflationRate ?? "";
    message.raresPerPack = object.raresPerPack ?? 0;
    message.commonsPerPack = object.commonsPerPack ?? 0;
    message.unCommonsPerPack = object.unCommonsPerPack ?? 0;
    message.trialPeriod = object.trialPeriod ?? 0;
    message.gameVoteRatio = object.gameVoteRatio ?? 0;
    message.cardAuctionPriceReductionPeriod = object.cardAuctionPriceReductionPeriod ?? 0;
    message.airDropValue = (object.airDropValue !== undefined && object.airDropValue !== null)
      ? Coin.fromPartial(object.airDropValue)
      : undefined;
    message.airDropMaxBlockHeight = object.airDropMaxBlockHeight ?? 0;
    message.trialVoteReward = (object.trialVoteReward !== undefined && object.trialVoteReward !== null)
      ? Coin.fromPartial(object.trialVoteReward)
      : undefined;
    message.votePoolFraction = object.votePoolFraction ?? 0;
    message.votingRewardCap = object.votingRewardCap ?? 0;
    message.matchWorkerDelay = object.matchWorkerDelay ?? 0;
    message.rareDropRatio = object.rareDropRatio ?? 0;
    message.exceptionalDropRatio = object.exceptionalDropRatio ?? 0;
    message.uniqueDropRatio = object.uniqueDropRatio ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
