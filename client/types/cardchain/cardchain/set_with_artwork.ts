// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: cardchain/cardchain/set_with_artwork.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Set } from "./set";

export const protobufPackage = "cardchain.cardchain";

export interface SetWithArtwork {
  set: Set | undefined;
  artwork: Uint8Array;
}

function createBaseSetWithArtwork(): SetWithArtwork {
  return { set: undefined, artwork: new Uint8Array(0) };
}

export const SetWithArtwork: MessageFns<SetWithArtwork> = {
  encode(message: SetWithArtwork, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.set !== undefined) {
      Set.encode(message.set, writer.uint32(10).fork()).join();
    }
    if (message.artwork.length !== 0) {
      writer.uint32(18).bytes(message.artwork);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetWithArtwork {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetWithArtwork();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.set = Set.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.artwork = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetWithArtwork {
    return {
      set: isSet(object.set) ? Set.fromJSON(object.set) : undefined,
      artwork: isSet(object.artwork) ? bytesFromBase64(object.artwork) : new Uint8Array(0),
    };
  },

  toJSON(message: SetWithArtwork): unknown {
    const obj: any = {};
    if (message.set !== undefined) {
      obj.set = Set.toJSON(message.set);
    }
    if (message.artwork.length !== 0) {
      obj.artwork = base64FromBytes(message.artwork);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetWithArtwork>, I>>(base?: I): SetWithArtwork {
    return SetWithArtwork.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetWithArtwork>, I>>(object: I): SetWithArtwork {
    const message = createBaseSetWithArtwork();
    message.set = (object.set !== undefined && object.set !== null) ? Set.fromPartial(object.set) : undefined;
    message.artwork = object.artwork ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
